image: tmaier/docker-compose:latest
stages:
 - test
 - validate
 - build
 - deploy
 - destroy

test_crawler:
  stage: test
  image: mzabolotnov/test_crawler:2.0
  script:
    - cd $APP_HOME
    - git clone https://github.com/express42/search_engine_crawler.git
    - git clone https://github.com/express42/search_engine_ui.git
    
    - cd $APP_HOME/search_engine_crawler
    - pip3 install -r requirements.txt -r requirements-test.txt
    - echo "Тестирование кода...search_engine_crawler"
    - python3 -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include crawler/crawler.py > $APP_HOME/report_test_search_engine_crawler.txt
    - cp -f $APP_HOME/report_test_search_engine_crawler.txt ${CI_PROJECT_DIR}
    

    - cd $APP_HOME/search_engine_ui
    - pip install -r requirements.txt -r requirements-test.txt
    - echo "Тестирование кода...search_engine_ui"
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include ui/ui.py > $APP_HOME/report_test_search_engine_ui.txt
    - cp -f $APP_HOME/report_test_search_engine_ui.txt ${CI_PROJECT_DIR}
  
  when: manual

  artifacts:
    paths:
    - ${CI_PROJECT_DIR}/report_test_search_engine_crawler.txt
    - ${CI_PROJECT_DIR}/report_test_search_engine_ui.txt
    expire_in: 1 week
  
terraform_plan:
 stage: test
 image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
 cache:
    key: example-production
    paths:
      - ${TF_ROOT}/.terraform
 variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform
 before_script:
   - cd ${TF_ROOT}
   - ls -la
   - echo ${CI_API_V4_URL}
   - echo ${CI_PROJECT_DIR}
   - echo ${CI_PROJECT_ID}
 script:
    - gitlab-terraform init
    - gitlab-terraform validate
    - mv terraform.tfvars.example terraform.tfvars
    - mv key.json.example key.json
    - touch usr1.pub
    - touch usr1
    - gitlab-terraform plan
    - gitlab-terraform plan-json
 artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
 when: manual

 k8s_terraform_plan:
 stage: test
 image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
 cache:
    key: example-production
    paths:
      - ${TF_ROOT}/.terraform
 variables:
  TF_ROOT: ${CI_PROJECT_DIR}/k8s/terraform
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${TF_ROOT}
 before_script:
   - cd ${TF_ROOT}
   - ls -la
   - echo ${CI_API_V4_URL}
   - echo ${CI_PROJECT_DIR}
   - echo ${CI_PROJECT_ID}
 script:
    - gitlab-terraform init
    - gitlab-terraform validate
    - mv -f terraform.tfvars.example terraform.tfvars
    - mv key.json.example key.json
    - touch id_rsa.pub
    - touch id_rsa
    - gitlab-terraform plan
    - gitlab-terraform plan-json
 artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
 when: manual

    
Validate-dockerfile:
  stage: validate
  services:
    - docker:dind
  script:
    - cd ./docker
    - docker-compose -f docker-compose-monitoring.yml -f docker-compose.yml config
  when: manual

Build_images_docker:
  stage: build
  services:
   - docker:dind
  before_script:
   - docker info
  script:
   - docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_PASSWORD
   - docker build -t mzabolotnov/crawler:k8s_ci_a3.0 docker/dockerfile/crawler && docker push mzabolotnov/crawler:k8s_ci_a3.0
   - docker build -t mzabolotnov/ui:k8s_ci_a3.0 docker/dockerfile/ui && docker push mzabolotnov/ui:k8s_ci_a3.0
  #  - docker push mzabolotnov/crawler:k8s_ci_2.0
  #  - docker push mzabolotnov/ui:k8s_ci_2.0
  #  - docker-compose -f docker-compose-monitoring.yml -f docker-compose.yml build
   - docker images
  
  when: manual



deploy_k8s_dev_helm:
  # image: gcr.io/cloud-builders/kubectl:latest
  image: mzabolotnov/kubectl_helm:2.0
  stage: deploy
  before_script:
    - echo $KUBE_URL_DEV
    - echo $CI_PROJECT_DIR
  script:
    - cd k8s_crawler/crawler
    - pwd
    - echo $KUBE_URL_DEV
    - echo $CI_PROJECT_DIR
    - kubectl config set-cluster k8s --server="$KUBE_URL_DEV" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN_DEV"
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    - kubectl config view
    - kubectl get nodes
    # - sed -i "s/__VERSION__/gitlab-$CI_COMMIT_SHORT_SHA/" k8s.yaml
    - helm dep update chart/app
    - helm upgrade app chart/app --install
    # - kubectl apply -f .
    - echo "Pause 10 сек..."
    - sleep 10
    - kubectl get pods
  when: manual
  environment:
      name: dev
      url: http://mikhza.twilightparadox.com/

deploy_k8s_prod_helm:
  # image: gcr.io/cloud-builders/kubectl:latest
  image: mzabolotnov/kubectl_helm:2.0
  stage: deploy
  before_script:
    - echo $KUBE_URL
    - echo $CI_PROJECT_DIR
  script:
    - cd k8s_crawler/crawler
    - pwd
    - echo $KUBE_URL
    - echo $CI_PROJECT_DIR
    - kubectl config set-cluster k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    - kubectl config view
    - kubectl get nodes
    - sed -i "s/mikhza.twilightparadox.com/mikhza-prod.twilightparadox.com/" chart/ui/values.yaml
    - cat chart/ui/values.yaml
    - helm dep update chart/app
    - helm upgrade app chart/app --install
    # - kubectl apply -f .
    - echo "Pause 10 сек..."
    - sleep 10
    - kubectl get pods
  when: manual
  environment:
      name: prod
      url: http://mikhza-prod.twilightparadox.com/

destroy_k8s_dev_helm:
  # image: gcr.io/cloud-builders/kubectl:latest
  image: mzabolotnov/kubectl_helm:2.0
  stage: destroy
  before_script:
    - echo $KUBE_URL_DEV
    - echo $CI_PROJECT_DIR
  script:
    - cd k8s_crawler/crawler
    - echo $KUBE_URL_DEV
    - kubectl config set-cluster k8s --server="$KUBE_URL_DEV" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN_DEV"
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    - kubectl get pods
    # - sed -i "s/__VERSION__/gitlab-$CI_COMMIT_SHORT_SHA/" k8s.yaml
    - helm ls
    - helm uninstall app
    - sleep 20
    - kubectl get pods
  when: manual

destroy_k8s_prod_helm:
  # image: gcr.io/cloud-builders/kubectl:latest
  image: mzabolotnov/kubectl_helm:2.0
  stage: destroy
  before_script:
    - echo $KUBE_URL
    - echo $CI_PROJECT_DIR
  script:
    - cd k8s_crawler/crawler
    - echo $KUBE_URL
    - kubectl config set-cluster k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    - kubectl get pods
    # - sed -i "s/__VERSION__/gitlab-$CI_COMMIT_SHORT_SHA/" k8s.yaml
    - helm ls
    - helm uninstall app
    - kubectl get pods
  when: manual
